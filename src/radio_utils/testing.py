import csv
import random
import time
import os

DEFAULT_PARAMS = {
    'S1:SERIAL_SPEED': 57,      # 57600 baudrate
    'S3:NETID': 18,
    'S5:ECC': 0,
    'S8:MIN_FREQ': 434550,
    'S9:MAX_FREQ': 434650,
    'S10:NUM_CHANNELS': 10,
    'S11:DUTY_CYCLE': 100,
    'S12:LBT_RSSI': 0,
    'S13:MANCHESTER': 0,
    'S14:RTSCTS': 0,
    'S15:MAX_WINDOW': 100
}

# I'm sorry for i have sinned
DEFAULT_PACKET_LIST_200B = [b'AV3FEMX3LLR8L6YSB9ZRQZ403JN04BHBUYTX2FSDBMX0SQK0P6CJYFV8S9Q1139E06J911JQC0F4MYKXWLQI0YM5MMZDGWFWSPN2XH6KF6TT6ICWN1CG0BLF91B2V9H9PZVQFQD1SMDXZFDMI53KJQ80VX6JG77BNMV9RIH7L6ETLRUXP6BBMYU0HLNDD5B7KTWU9CJO', b'AT3PIPD1EU2UU1XDZXXERSW178X4IBKVDXP5RJW0L6RNGJ3RWHGTBCV6M4FI8MK9W9GQZXV7ZJ7L51LE8SWNUGS6K0UQ6ZH4MTIJJ2GT84PEHHCKMZFX38BCXL30M0ZWC49IQBR3KM8QZ3JUT546IRZ9EK6WYU02VPYBXH9KTCFQTS4M1J517VH6HJHPIW508X07K8PO', b'A2WWQ7HEH54XDP4XCJMUGNNNTXUI15H7Z2W0ZU4723HLDIW3L8NI43WY7RMRPUW9Y6XZU1Q69DS7TEU3FQHGXXKPW983C9J5QHLCBRU0F8FX0I1HSDNEJM49UMS1ZGQV7L5QHPTXXDIN677VJLX9VYFDEJWNPSJ8TL138BG9C5883EWVWE0B6NQ01VFLQUWV2E3YU0XO', b'ASEYM27YLZDCNBJRLMM4CF1XL5S6GH5V7G76KMPBTPFTZQMF0U9GC05N87PLH5PSYYDEZBLYW5XTE2FXSPC852LWNZBP5JF2BK8X9KS8DQCQ27YK7SHUUJ46D1RIM8SKJ79UGH4EIE5SYS92XI4HU07GHUYGKV6GRWL7H3C0116UFS1NXUPIJKBFVQSJGMJUYBFMBP3O', b'A4206GM0YZLM4KDHL3BTWXSQGBWQQ5D98VG8TP9WICG0V1UHUI8KIFETZIHKEN50T5WCSVRMWNIHV2W7KFKIDWIJCUJSJYWF3C1PB6SL5FEHR3JNEF0SJ3ITXFK4CQLUER42KQMPTC2KN2FKBY3PIXXV1LTBJ16NW9QZF83FISHCCHYH3W5S9K22CUWK0Z18GIDHJNVO', b'AMBSITLCUBBFW14JQ5VF32WNF2BQPPCV8WRUY5VDHBJK4W5T3TKM0BG29P4EI6TLZ43NMUMQ4QT9NKN105RRE9UPM4GBS54DVVVFERCGEBXX9X9C6Z89GXYTUSR27VS6Z4W1NKIGPCCEF6Y4UU4UG5SP69NDZE7XMZNZ09GL7QMTZ86W78LBYQJZ51LZ3GB21U3NCWEO', b'AZNF7UYJV34J8SRTCFPRPGW9KWC6U0P21RMYYIY8RQ5NXR4RI8U5T3G4MV6WG61QSCI8B93GIEXJUE3YND170M82QPJV51MBS5IURIJGD49N9KYIGSW43S5PTV476V247P693NMU26I4YZMBDR2LEQUFWN28VN5STT48THS57S3YRP8FG33D30GET4F8I843LIHZ8X7O', b'ABZ8B2DEWQEC8YIK65H7SPKYLVW9SIDD3YXPQR3U4WV8ZTX9KZS0C8V7CR4WK1L15WFNB2FNFXXB15SCYC1YRENUV782BDXUHZWWWPYNU1ILGF9VQXK7X2N7GJQF43B8GBWHZT4T1DMKMIQPNL2PSCW1HTK24JCCXV19LQ0JQ8HQPFURPZKM96CGD7DELB8DJRHPF27O', b'A52V7VU8LLHMFC68TV8R33PKD0MCING19XL4E8MTMXJLIUT3K9ZH746FTIR7XI0PGU5UD6M46XT2GCW3WBBQLPM4XVUGFLGCB9I72QW3V80QZ0HGEDWXKLJ1XNMU475FM24V25YG2XM8P0DPVPG54NG9JN0N0X9VK1RF7CYWQX7Y3G0LF04XSG9U0S8L1082ZTUNMDEO', b'AGLIIQDFXDZ1XX6DIT15STP5MTJ1GBNVIWPG96YM4MMH4DU3IKJLHCEUU8RDXLEHCCXZWC6Z2KXRZN1XMLEV4PN4VV4T3SCQVB27ELLECMSNCNXPGGSYK9RBIF6SS45QNZXTC1K9I58NYGIR1YC96RGMXB5H3U28KXE3SZYU0DB5P4QNPZYH1454GKTXTR2S7TBNZTIO', b'AL6ICI2B4Q2CWJXKFBSI8JQ9JKZWW0YWXI6FJ6MBCC15JL4JRWH3HEC4LKY3F7GK6X3HSBBWVLVFMQS1FDFB3H0FLUUPMBFJVXGDF8ZHZL4BQZHY08JIPIF5LJSP1SBM72L11HVFGQQI2R8RK5CR7WB9L2IWC6RTTKWPM9JM2DVN5GI1152XEZPKW0CM9EUGWQY49CGO', b'A6SY0KR24256RQB63H6HEVTD3U53CC1VTE38LES2FCEXGC2PL6Y6PDI7DRS0UM85228K9MC12B5HR9UXEMN3S4S8LGKF64FQD5HJ0MK3Z9VKIGGM7QRRJ6Y5LBIYUN9MHD0403IV4T71JH1P5TSM29QD9WEHUNLF5T9SEQLZWHMV2G8J7MK9P1KU6Y0KYS7BTQ23KPRO', b'ALHN3EFHFREUDFURSPJPFF3U0L4YMTY8S5N2Q831GSY01EFSSTIYURKC84BUD3M5TPWUNZ69V4W5SDY25P4KMZZRVYNG0SFVF7N02SPQN44DRSBUGC0CT51IG2JZPF0WMNQP79810Q4RFI0KV2JPV1V4FNR39U6DYQ68EGD0L33DD68ZFVDTC9ZUY9QGPY9C0XQ4BN0O', b'AI4WPWLW04MZDXSI3MH7SUMQX4L65JMKGXC4QTKVPMVTMGS5C465W7IGI5FSY7XD2JDQBUFY36FJ7BC0KCG7I0B16KGQDB1W347V28Y3GPNMKFMHDUHB3Y9FC0V2FYNLR4J6HW8GQMFY3PLND1CHK3DQ0M2H84IKMD2WZI3FYCGSVSXE8LGYQ6067DQEGJ2D6TWH7VBO', b'AKY083EVYP8IGXVN2C5R4SJZ8F8EL1PJHVP1SFUMWR0BCX78DENLLT2PU5RMQEYF31FDWYPL8ZJ5UMFSCBGVWF1FZ9I91FC8VZ7RUYDGUZ7WNVKH3SRGF1J3XGVUKYYRT80YX474EW97G4EZ0VQXBIJ27TVDVEHG5XYL0EXE5IN8TGF32X3JLG94GZY4F0X45XSR3TGO', b'AEGYGQ9L2LQVI19EZ8MYKHWD7H66MP6S392X859T481W6CP97T1X37KVC24LJFCV09RFEG2S2S82DNKCYDCD0V3FRGYQNDLS1RFCN8R5QE2I3P0CNEQBV0Z0WE0SQD60G3FJP72V3R44D81IT9ZNN105J653B4X0PY4UB5SDVR6N1ELK7DT2LL4TSXUUXCU8GY04EF4O']
DEFAULT_PACKET_LIST_64B = [b'A1L0S7T925R7IGNT697YH9KY05S9KFM1CZS22LSMQYE1I3ZGXYVFCWKQ319S1DNO', b'A1QSJJJFDBSESTT15Y7UV2BBM93UTY6U9MM4D10XVBUYEM0WDSJF7CTEFT5FQ46O', b'AHNZJE7C1LETC7HRLXE1QL6NCP16W9LS4YY9T0DNT9E9LRZ169JNNRZNYUHPCVZO', b'A13CRUW31CBC1YB837W2HFEQWQVRKZIQW2IF2VSKKJPMEH76L3Q6I2HITRKIQX9O', b'AVWWBF4RP1UVSYXQG2Y111PGIKY71763U2UU4TU1TPHEV7K8VWGNUGC50B84LJ5O', b'ACI1XY59TI23ZX2M8GJ1S0FTIZPKF155EP7RZKMFD16JHF48MUZ75WD5NS41WUEO', b'AVNUQXJF3H8JR70BY1HTM4KQXQPPEYCRC4G953RTQ3S6BS83GS5HNXRP1210UN0O', b'AZM4JUF99CBR558VMZP1L3DQVXBHIZ5LSGP7T7H8N5DMQQ2HSMN1Z0QQCXSJFRQO', b'AZKRSLHW3L1TI2GFTVZYUBXR91VZL81948GSN5TQP6UF7QL8L225QJPWGSIWDCIO', b'ADRMD4XT6G8E4RR536CD71PI3NNFHRJBX8LC9GJQWVJMEF0BJYZ4CIGR1PY1QS9O', b'AWGDNXZ32NWXCZR2ZCBCR3BLSNHYTDRI9XPRWBD2SD214KNEMWRWN4CM61N1HKSO', b'ABKQXWX222VQ8X743SCT3M6ZRYRG5XS91FQZVVIC1KHZUTILE17712PEDR1XHZ8O', b'AN2J0ELCVHYCLVJ4M7F1FQPJ0CUCK68VTFRGNPRJ4D4D868623QYWSD13NKUDFLO', b'AE4H5KKRWF2VUIDKDS4E469HDGVUY7F9BSGSIMUS4HTEEIM9XU7X2CUDQ9LVQ7YO', b'APBC32JLJS359DWIZ1U9RX08KSDLPTE12DX3MS7WTLUVXQ8HV4CNIMFB089H7VCO', b'AVJP8WINZEI6F0BNJ3RRWKCP9Y8IRYH7G49HVFBGC5HQMBJQXYEWQEZYFQ9CP78O']
DEFAULT_PACKET_LIST_16B = [b'ABQQB2Q83R7LUGCO', b'ACYSX3NWLHFIIVLO', b'AF4TKUF3D5SJXJ0O', b'A7UGVUZF25228BCO', b'ASR8I889H580C2YO', b'AR0E61HR6FBNIS7O', b'ATQVKTGS932K9JNO', b'ALLPWT2EZ25LG99O', b'AQV9MXYQU6IFBXSO', b'ALGUNMCDSX8WSEBO', b'A8X400YK9LB9TPBO', b'AM4T0YN4DG458HNO', b'AFVRNI47TWG3FS7O', b'AN3J4M692YKGR5QO', b'AWPQSW5F3STV8B5O', b'AD7SVJUWX0N1VZVO']


def write_results_to_csv(results, filename):
    file_exists = os.path.exists(filename)
    keys = results[0].keys()
    
    with open(filename, 'a', newline='') as output_file:
        dict_writer = csv.DictWriter(output_file, fieldnames=keys)
        
        if not file_exists:
            dict_writer.writeheader()  # Write headers only if the file does not exist
        
        dict_writer.writerows(results)  # Append the rows

def generate_random_packet(size: int) -> bytes:
    # Starts with alpha ends with omega
    if size < 2:
        raise ValueError("Size must be at least 2 to accommodate 'A' and 'O'.")
    
    # Calculate the size for the middle part
    middle_size = size - 2  # 1 byte for 'A' and 1 byte for 'O'
    
    characters = 'BCDEFGHIJKLMNPQRSTUVWXYZ0123456789' # no A nor O generated mid way
    
    # Generate random characters for the middle part
    middle_part = ''.join(random.choice(characters) for _ in range(middle_size))
    
    # Create the packet with 'A' at the start and 'O' at the end
    packet = b'A' + middle_part.encode('ascii') + b'O'
    return packet

def calculate_ber(sent_bits, received_bits) -> int:
    # Bit Error Rate calculation (BER)
    errors = sum(1 for s, r in zip(sent_bits, received_bits) if s != r)
    try:
        return errors / len(sent_bits)
    except ZeroDivisionError:
        return 0

def calculate_per(sent_packets, received_packets) -> int:
    # Packet Error Rate calculation (PER)
    try:
        errors = sent_packets - received_packets
        return errors / sent_packets
    except ZeroDivisionError:
        return 0

def send_packets_at_defined_speed(transmitter,predefined_packets:list[bytes],number_of_packets_to_send:int,speed:int):
   # assumes that predefined_packets are all the same size
   print(f'sending {len(predefined_packets[0])}B packets at {speed} packets/s ')
   for i in range(number_of_packets_to_send):
        packet_index = i % len(predefined_packets)  # modulo to repeat packets -> this allows to have custom amount of packets e.g. 18
        packet = predefined_packets[packet_index]
        transmitter.write(packet)
        time.sleep(1/speed) # packets/s
        print(f"Sending packet {i + 1}: {packet.decode('ascii')}")

def str2bin(input_str: str) -> str:
    # Remove line breaks and spaces
    input_str = input_str.replace("\n", "").replace(" ", "")

    # Convert each character to its ASCII code and then to binary
    binary_representation = ''.join(f'{ord(char):08b}' for char in input_str)
    return binary_representation


# packet_64B = [generate_random_packet(64) for _ in range(16)]
# print(f"DEFAULT_PACKET_LIST_64B = {packet_64B}")